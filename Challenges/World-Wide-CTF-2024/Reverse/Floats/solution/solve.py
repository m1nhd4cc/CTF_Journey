from z3 import *
import struct

def solve_iteration(result):
	solver = Solver()

	floats = [FP(f"v{i}", Float32()) for i in range(655)]
	
	v = floats.copy()
	for f in v:
		solver.add(Or(f == 0.0, f == -0.0))

	v[130] = v[116] + v[127];
	v[131] = -v[127] - v[116];
	v[132] = -(v[116] + v[127]) - v[131];
	v[133] = v[115] + v[126];
	v[134] = -v[126] - v[115];
	v[135] = -(v[115] + v[126]) - v[134];
	v[136] = v[114] + v[125];
	v[137] = -v[125] - v[114];
	v[138] = -(v[114] + v[125]) - v[137];
	v[139] = v[113] + v[124];
	v[140] = -v[124] - v[113];
	v[141] = -(v[113] + v[124]) - v[140];
	v[142] = v[112] + v[123];
	v[143] = -v[123] - v[112];
	v[144] = -(v[112] + v[123]) - v[143];
	v[145] = v[111] + v[122];
	v[146] = -v[122] - v[111];
	v[147] = -(v[111] + v[122]) - v[146];
	v[148] = v[110] + v[121];
	v[149] = -v[121] - v[110];
	v[150] = -(v[110] + v[121]) - v[149];
	v[151] = v[109] + v[120];
	v[152] = -v[120] - v[109];
	v[153] = -(v[109] + v[120]) - v[152];
	v[154] = v[108] + v[119];
	v[155] = -v[119] - v[108];
	v[156] = -(v[108] + v[119]) - v[155];
	v[157] = v[107] + v[118];
	v[158] = -v[118] - v[107];
	v[159] = -(v[107] + v[118]) - v[158];
	v[160] = v[106] + v[117];
	v[161] = -v[117] - v[106];
	v[162] = -(v[106] + v[117]) - v[161];
	v[163] = v[105] + v[116];
	v[164] = -v[116] - v[105];
	v[165] = -(v[105] + v[116]) - v[164];
	v[166] = v[104] + v[115];
	v[167] = -v[115] - v[104];
	v[168] = -(v[104] + v[115]) - v[167];
	v[169] = v[103] + v[114];
	v[170] = -v[114] - v[103];
	v[171] = -(v[103] + v[114]) - v[170];
	v[172] = v[102] + v[113];
	v[173] = -v[113] - v[102];
	v[174] = -(v[102] + v[113]) - v[173];
	v[175] = v[101] + v[112];
	v[176] = -v[112] - v[101];
	v[177] = -(v[101] + v[112]) - v[176];
	v[178] = v[100] + v[111];
	v[179] = -v[111] - v[100];
	v[180] = -(v[100] + v[111]) - v[179];
	v[181] = v[99] + v[110];
	v[182] = -v[110] - v[99];
	v[183] = -(v[99] + v[110]) - v[182];
	v[184] = v[98] + v[109];
	v[185] = -v[109] - v[98];
	v[186] = -(v[98] + v[109]) - v[185];
	v[187] = v[97] + v[108];
	v[188] = -v[108] - v[97];
	v[189] = -(v[97] + v[108]) - v[188];
	v[190] = v[96] + v[107];
	v[191] = -v[107] - v[96];
	v[192] = -(v[96] + v[107]) - v[191];
	v[193] = v[104] + v[96];
	v[194] = -v[96] - v[104];
	v[195] = -(v[104] + v[96]) - v[194];
	v[196] = v[105] + v[97];
	v[197] = -v[97] - v[105];
	v[198] = -(v[105] + v[97]) - v[197];
	v[199] = v[106] + v[98];
	v[200] = -v[98] - v[106];
	v[201] = -(v[106] + v[98]) - v[200];
	v[202] = v[99] - v[192];
	v[203] = v[192] - v[99];
	v[204] = -(v[99] - v[192]) - (v[192] - v[99]);
	v[205] = v[100] - v[189];
	v[206] = v[189] - v[100];
	v[207] = -(v[100] - v[189]) - (v[189] - v[100]);
	v[208] = v[101] - v[186];
	v[209] = v[186] - v[101];
	v[210] = -(v[101] - v[186]) - (v[186] - v[101]);
	v[211] = v[102] - v[183];
	v[212] = v[183] - v[102];
	v[213] = -(v[102] - v[183]) - (v[183] - v[102]);
	v[214] = v[103] - v[180];
	v[215] = v[180] - v[103];
	v[216] = -(v[103] - v[180]) - (v[180] - v[103]);
	v[217] = v[104] - v[177];
	v[218] = v[177] - v[104];
	v[219] = -(v[104] - v[177]) - (v[177] - v[104]);
	v[220] = v[105] - v[174];
	v[221] = v[174] - v[105];
	v[222] = -(v[105] - v[174]) - (v[174] - v[105]);
	v[223] = v[106] - v[171];
	v[224] = v[171] - v[106];
	v[225] = -(v[106] - v[171]) - (v[171] - v[106]);
	v[226] = -v[192] - v[168];
	v[227] = v[168] + v[192];
	v[228] = -v[226] - (v[168] + v[192]);
	v[229] = -v[189] - v[165];
	v[230] = v[165] + v[189];
	v[231] = -v[229] - (v[165] + v[189]);
	v[232] = -v[186] - v[162];
	v[233] = v[162] + v[186];
	v[234] = -v[232] - (v[162] + v[186]);
	v[235] = -v[183] - v[159];
	v[236] = v[159] + v[183];
	v[237] = -v[235] - (v[159] + v[183]);
	v[238] = -v[180] - v[156];
	v[239] = v[156] + v[180];
	v[240] = -v[238] - (v[156] + v[180]);
	v[241] = -v[177] - v[153];
	v[242] = v[153] + v[177];
	v[243] = -v[241] - (v[153] + v[177]);
	v[244] = -v[174] - v[150];
	v[245] = v[150] + v[174];
	v[246] = -v[244] - (v[150] + v[174]);
	v[247] = -v[171] - v[147];
	v[248] = v[147] + v[171];
	v[249] = -v[247] - (v[147] + v[171]);
	v[250] = -v[168] - v[144];
	v[251] = v[144] + v[168];
	v[252] = -v[250] - (v[144] + v[168]);
	v[253] = -v[165] - v[141];
	v[254] = v[141] + v[165];
	v[255] = -v[253] - (v[141] + v[165]);
	v[256] = -v[162] - v[138];
	v[257] = v[138] + v[162];
	v[258] = -v[256] - (v[138] + v[162]);
	v[259] = -v[159] - v[135];
	v[260] = v[135] + v[159];
	v[261] = -v[259] - (v[135] + v[159]);
	v[262] = -v[156] - v[132];
	v[263] = v[132] + v[156];
	v[264] = -v[262] - (v[132] + v[156]);
	v[265] = v[31] - v[132];
	v[266] = v[132] - v[31];
	v[267] = -(v[31] - v[132]) - (v[132] - v[31]);
	v[268] = v[30] - v[135];
	v[269] = v[135] - v[30];
	v[270] = -(v[30] - v[135]) - (v[135] - v[30]);
	v[271] = v[29] - v[138];
	v[272] = v[138] - v[29];
	v[273] = -(v[29] - v[138]) - (v[138] - v[29]);
	v[274] = v[28] - v[141];
	v[275] = v[141] - v[28];
	v[276] = -(v[28] - v[141]) - (v[141] - v[28]);
	v[277] = v[27] - v[144];
	v[278] = v[144] - v[27];
	v[279] = -(v[27] - v[144]) - (v[144] - v[27]);
	v[280] = v[26] - v[147];
	v[281] = v[147] - v[26];
	v[282] = -(v[26] - v[147]) - (v[147] - v[26]);
	v[283] = v[25] - v[150];
	v[284] = v[150] - v[25];
	v[285] = -(v[25] - v[150]) - (v[150] - v[25]);
	v[286] = v[24] - v[153];
	v[287] = v[153] - v[24];
	v[288] = -(v[24] - v[153]) - (v[153] - v[24]);
	v[289] = v[23] - v[264];
	v[290] = v[264] - v[23];
	v[291] = -(v[23] - v[264]) - (v[264] - v[23]);
	v[292] = v[22] - v[261];
	v[293] = v[261] - v[22];
	v[294] = -(v[22] - v[261]) - (v[261] - v[22]);
	v[295] = v[21] - v[258];
	v[296] = v[258] - v[21];
	v[297] = -(v[21] - v[258]) - (v[258] - v[21]);
	v[298] = v[20] - v[255];
	v[299] = v[255] - v[20];
	v[300] = -(v[20] - v[255]) - (v[255] - v[20]);
	v[301] = v[19] - v[252];
	v[302] = v[252] - v[19];
	v[303] = -(v[19] - v[252]) - (v[252] - v[19]);
	v[304] = v[18] - v[249];
	v[305] = v[249] - v[18];
	v[306] = -(v[18] - v[249]) - (v[249] - v[18]);
	v[307] = v[17] - v[246];
	v[308] = v[246] - v[17];
	v[309] = -(v[17] - v[246]) - (v[246] - v[17]);
	v[310] = v[16] - v[243];
	v[311] = v[243] - v[16];
	v[312] = -(v[16] - v[243]) - (v[243] - v[16]);
	v[313] = v[15] - v[240];
	v[314] = v[240] - v[15];
	v[315] = -(v[15] - v[240]) - (v[240] - v[15]);
	v[316] = v[14] - v[237];
	v[317] = v[237] - v[14];
	v[318] = -(v[14] - v[237]) - (v[237] - v[14]);
	v[319] = v[13] - v[234];
	v[320] = v[234] - v[13];
	v[321] = -(v[13] - v[234]) - (v[234] - v[13]);
	v[322] = v[12] - v[231];
	v[323] = v[231] - v[12];
	v[324] = -(v[12] - v[231]) - (v[231] - v[12]);
	v[325] = v[11] - v[228];
	v[326] = v[228] - v[11];
	v[327] = -(v[11] - v[228]) - (v[228] - v[11]);
	v[328] = v[10] - v[225];
	v[329] = v[225] - v[10];
	v[330] = -(v[10] - v[225]) - (v[225] - v[10]);
	v[331] = v[9] - v[222];
	v[332] = v[222] - v[9];
	v[333] = -(v[9] - v[222]) - (v[222] - v[9]);
	v[334] = v[8] - v[219];
	v[335] = v[219] - v[8];
	v[336] = -(v[8] - v[219]) - (v[219] - v[8]);
	v[337] = v[7] - v[216];
	v[338] = v[216] - v[7];
	v[339] = -(v[7] - v[216]) - (v[216] - v[7]);
	v[340] = v[6] - v[213];
	v[341] = v[213] - v[6];
	v[342] = -(v[6] - v[213]) - (v[213] - v[6]);
	v[343] = v[5] - v[210];
	v[344] = v[210] - v[5];
	v[345] = -(v[5] - v[210]) - (v[210] - v[5]);
	v[346] = v[4] - v[207];
	v[347] = v[207] - v[4];
	v[348] = -(v[4] - v[207]) - (v[207] - v[4]);
	v[349] = v[3] - v[204];
	v[350] = v[204] - v[3];
	v[351] = -(v[3] - v[204]) - (v[204] - v[3]);
	v[352] = v[2] - v[201];
	v[353] = v[201] - v[2];
	v[354] = -(v[2] - v[201]) - (v[201] - v[2]);
	v[355] = v[1] - v[198];
	v[356] = v[198] - v[1];
	v[357] = -(v[1] - v[198]) - (v[198] - v[1]);
	v[358] = v[0] - v[195];
	v[359] = v[195] - v[0];
	v[360] = -(v[0] - v[195]) - (v[195] - v[0]);
	v[361] = v[31] - v[324];
	v[362] = v[324] - v[31];
	v[363] = -(v[31] - v[324]) - (v[324] - v[31]);
	v[364] = v[30] - v[327];
	v[365] = v[327] - v[30];
	v[366] = -(v[30] - v[327]) - (v[327] - v[30]);
	v[367] = v[29] - v[330];
	v[368] = v[330] - v[29];
	v[369] = -(v[29] - v[330]) - (v[330] - v[29]);
	v[370] = v[28] - v[333];
	v[371] = v[333] - v[28];
	v[372] = -(v[28] - v[333]) - (v[333] - v[28]);
	v[373] = v[27] - v[336];
	v[374] = v[336] - v[27];
	v[375] = -(v[27] - v[336]) - (v[336] - v[27]);
	v[376] = v[26] - v[339];
	v[377] = v[339] - v[26];
	v[378] = -(v[26] - v[339]) - (v[339] - v[26]);
	v[379] = v[25] - v[342];
	v[380] = v[342] - v[25];
	v[381] = -(v[25] - v[342]) - (v[342] - v[25]);
	v[382] = v[24] - v[345];
	v[383] = v[345] - v[24];
	v[384] = -(v[24] - v[345]) - (v[345] - v[24]);
	v[385] = v[23] - v[348];
	v[386] = v[348] - v[23];
	v[387] = -(v[23] - v[348]) - (v[348] - v[23]);
	v[388] = v[22] - v[351];
	v[389] = v[351] - v[22];
	v[390] = -(v[22] - v[351]) - (v[351] - v[22]);
	v[391] = v[21] - v[354];
	v[392] = v[354] - v[21];
	v[393] = -(v[21] - v[354]) - (v[354] - v[21]);
	v[394] = v[20] - v[357];
	v[395] = v[357] - v[20];
	v[396] = -(v[20] - v[357]) - (v[357] - v[20]);
	v[397] = v[19] - v[360];
	v[398] = v[360] - v[19];
	v[399] = -(v[19] - v[360]) - (v[360] - v[19]);
	v[127] = v[95];
	v[126] = v[94];
	v[125] = v[93];
	v[124] = v[92];
	v[123] = v[91];
	v[122] = v[90];
	v[121] = v[89];
	v[120] = v[88];
	v[119] = v[87];
	v[118] = v[86];
	v[117] = v[85];
	v[116] = v[84];
	v[115] = v[83];
	v[114] = v[82];
	v[113] = v[81];
	v[112] = v[80];
	v[111] = v[79];
	v[110] = v[78];
	v[109] = v[77];
	v[108] = v[76];
	v[107] = v[75];
	v[106] = v[74];
	v[105] = v[73];
	v[104] = v[72];
	v[103] = v[71];
	v[102] = v[70];
	v[101] = v[69];
	v[100] = v[68];
	v[99] = v[67];
	v[98] = v[66];
	v[97] = v[65];
	v[96] = v[64];
	v[95] = v[63];
	v[94] = v[62];
	v[93] = v[61];
	v[92] = v[60];
	v[91] = v[59];
	v[90] = v[58];
	v[89] = v[57];
	v[88] = v[56];
	v[87] = v[55];
	v[86] = v[54];
	v[85] = v[53];
	v[84] = v[52];
	v[83] = v[51];
	v[82] = v[50];
	v[81] = v[49];
	v[80] = v[48];
	v[79] = v[47];
	v[78] = v[46];
	v[77] = v[45];
	v[76] = v[44];
	v[75] = v[43];
	v[74] = v[42];
	v[73] = v[41];
	v[72] = v[40];
	v[71] = v[39];
	v[70] = v[38];
	v[69] = v[37];
	v[68] = v[36];
	v[67] = v[35];
	v[66] = v[34];
	v[65] = v[33];
	v[64] = v[32];
	v[63] = v[31];
	v[62] = v[30];
	v[61] = v[29];
	v[60] = v[28];
	v[59] = v[27];
	v[58] = v[26];
	v[57] = v[25];
	v[56] = v[24];
	v[55] = v[23];
	v[54] = v[22];
	v[53] = v[21];
	v[52] = v[20];
	v[51] = v[19];
	v[50] = v[18];
	v[49] = v[17];
	v[48] = v[16];
	v[47] = v[15];
	v[46] = v[14];
	v[45] = v[13];
	v[44] = v[12];
	v[43] = v[11];
	v[42] = v[10];
	v[41] = v[9];
	v[40] = v[8];
	v[39] = v[7];
	v[38] = v[6];
	v[37] = v[5];
	v[36] = v[4];
	v[35] = v[3];
	v[34] = v[2];
	v[33] = v[1];
	v[32] = v[0];
	v[31] = -v[267];
	v[30] = -v[270];
	v[29] = -v[273];
	v[28] = -v[276];
	v[27] = -v[279];
	v[26] = -v[282];
	v[25] = -v[285];
	v[24] = -v[288];
	v[23] = -v[291];
	v[22] = -v[294];
	v[21] = -v[297];
	v[20] = -v[300];
	v[19] = -v[303];
	v[18] = -v[306];
	v[17] = -v[309];
	v[16] = -v[312];
	v[15] = -v[315];
	v[14] = -v[318];
	v[13] = -v[321];
	v[12] = -v[363];
	v[11] = -v[366];
	v[10] = -v[369];
	v[9] = -v[372];
	v[8] = -v[375];
	v[7] = -v[378];
	v[6] = -v[381];
	v[5] = -v[384];
	v[4] = -v[387];
	v[3] = -v[390];
	v[2] = -v[393];
	v[1] = -v[396];
	v[0] = -v[399];

	for i in range(128):
		solver.add(v[i] == result[i])
	solver.check()

	model = solver.model()
	return [0.0 if model.evaluate(floats[i]).isPositive() else -0.0 for i in range(128)]

def solve_final():
	solver = Solver()

	v = [FP(f"v{i}", Float32()) for i in range(655)]
	for f in v:
		solver.add(Or(f == 0.0, f == -0.0))

	v[654] = (v[2] \
          + ((v[4] \
            + ((((v[8] \
                + (v[9] \
                 + ((v[11] \
                   + ((v[13] \
                     + (v[14] \
                      + (v[15] \
                       + (v[16] \
                        + (((((v[21] \
                             + ((v[23] \
                               + (v[24] \
                                + ((v[26] \
                                  + (v[27] \
                                   + ((v[29] \
                                     + (v[30] \
                                      + (((v[33] \
                                         + ((v[35] \
                                           + ((v[37] \
                                             + ((v[39] \
                                               + ((v[41] \
                                                 + (v[42] \
                                                  + (v[43] \
                                                   + ((((v[47] \
                                                       + (((v[50] \
                                                          + ((v[52] \
                                                            + ((v[54] \
                                                              + ((v[56] \
                                                                + (v[57] \
                                                                 + (v[58] \
                                                                  + ((v[60] \
                                                                    + (v[61] \
                                                                     + ((v[63] \
                                                                       + (v[64] \
                                                                        + (v[65] \
                                                                         + ((v[67] \
                                                                           + (((v[70] \
                                                                              + (v[71] \
                                                                               + (((v[74] \
                                                                                  + ((v[76] \
                                                                                    + (v[77] \
                                                                                     + (v[78] \
                                                                                      + (v[79] \
                                                                                       + (v[80] \
                                                                                        + (v[81] \
                                                                                         + ((v[83] \
                                                                                           + (((((v[88] \
                                                                                                + ((v[90] \
                                                                                                  + (v[91] + (v[92] + (((v[95] + (v[96] + ((((v[100] + (((v[103] + ((((((v[109] + ((v[111] + (v[112] + (v[113] + ((((v[117] + ((v[119] + (v[120] + (v[121] + (v[122] + ((v[124] + ((-v[127] - v[126]) - v[125])) - v[123]))))) - v[118])) - v[116]) - v[115]) - v[114])))) - v[110])) - v[108]) - v[107]) - v[106]) - v[105]) - v[104])) - v[102]) - v[101])) - v[99]) - v[98]) - v[97]))) - v[94]) - v[93])))) \
                                                                                                 - v[89])) \
                                                                                               - v[87]) \
                                                                                              - v[86]) \
                                                                                             - v[85]) \
                                                                                            - v[84])) \
                                                                                          - v[82]))))))) \
                                                                                   - v[75])) \
                                                                                 - v[73]) \
                                                                                - v[72]))) \
                                                                             - v[69]) \
                                                                            - v[68])) \
                                                                          - v[66])))) \
                                                                      - v[62]))) \
                                                                   - v[59])))) \
                                                               - v[55])) \
                                                             - v[53])) \
                                                           - v[51])) \
                                                         - v[49]) \
                                                        - v[48])) \
                                                      - v[46]) \
                                                     - v[45]) \
                                                    - v[44])))) \
                                                - v[40])) \
                                              - v[38])) \
                                            - v[36])) \
                                          - v[34])) \
                                        - v[32]) \
                                       - v[31]))) \
                                    - v[28]))) \
                                 - v[25]))) \
                              - v[22])) \
                            - v[20]) \
                           - v[19]) \
                          - v[18]) \
                         - v[17]))))) \
                    - v[12])) \
                  - v[10]))) \
               - v[7]) \
              - v[6]) \
             - v[5])) \
           - v[3])) \
         - v[1]
	solver.add(v[654] - v[0] == -0.0)
	solver.check()

	model = solver.model()
	return [0.0 if model.evaluate(v[i]).isPositive() else -0.0 for i in range(128)]

print("Solving equation...")
temp = solve_final()
for i in range(16):
	print(f"Solving iteration {i + 1} / 16...")
	temp = solve_iteration(temp)

flag = ""
for i in range(16):
	byte = 0
	for j in range(8):
		bit = struct.pack("f", temp[i * 8 + 7 - j]) == bytes(4)
		byte = (byte << 1) | bit
	flag += chr(byte)

print(flag)