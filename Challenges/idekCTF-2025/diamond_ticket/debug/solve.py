from sage.all import *
from Crypto.Util.number import *

N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867
c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301
c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649

e = bytes_to_long(b"idek{this_is_a_fake_flag_lolol}")

Zn = Zmod(N)
PR, x = PolynomialRing(Zn, 'x').objgen()
f2 = x**2 - c2
QR, y = PR.quotient(f2, 'y').objgen()
f1 = y**e - c1

flag_chocolate = bytes_to_long(int(-f1[0]/f1[1]).to_bytes(128, "big")[-16:])
print(f"{flag_chocolate = }")

p = 170829625398370252501980763763988409583
a = 164164878498114882034745803752027154293
b = 125172356708896457197207880391835698381

Fp = GF(p)
j = Fp(b).log(Fp(a))
print(f"{j = }")
x = polygen(Fp)
print("Calculate f")
f = x**j + x - flag_chocolate
print("Calculate g")
g = pow(x, p, f) - x
print("Gcd")
roots = f.gcd(g).roots()
print(roots)

rlog = []
for c, _ in roots:
    try:
        rlog.append(int(Fp(c).log(Fp(a))))
        print(c)
    except:
        continue

print(len(rlog))

from cpmpy import *
import re

nn = 85414812699185126250990381881994204791
xx = rlog[0]

for ii in range(10):
    x = xx + ii * nn
    print(x)
    M = matrix(20, 20)
    M[0,0] = p - 1
    for i in range(19):
        M[i+1,i:i+2] = [[-256, 1]]

    M = M.LLL().rows()
    x_vec = [(x >> 8*i) & 0xff for i in range(20)]
    M += [tuple(x_vec)]
    m = Matrix(M)

    def disp():
        flag = bytes(x.value())[-8::-8].decode()
        if re.fullmatch(r'\w+', flag):
            print(flag, '<--- WIN')
        else:
            print(flag)
        
    x = cpm_array(list(intvar(-9999, 9999, 20)) + [1]) @ m[:]
    Model([x >= 32, x <= 122]).solveAll(display=disp)