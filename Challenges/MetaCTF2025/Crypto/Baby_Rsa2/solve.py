import math
from Crypto.Util.number import long_to_bytes

e_pub = 58271
d_pub = 16314065939355844497428646964774413938010062495984944007868244761330321449198604198404787327825341236658059256072790190934480082681534717838850610633320375625893501985237981407305284860652632590435055933317638416556532857376955427517397962124909869006289022084571993305966362498048396739334756594170449299859
N = 119082667712915497270407702277886743652985638444637188059938681008077058895935345765407160513555112013190751711213523389194925328565164667817570328474785391992857634832562389502866385475392702847788337877472422435555825872297998602400341624700149407637506713864175123267515579305109471947679940924817268027249
c = 107089582154092285354514758987465112016144455480126366962910414293721965682740674205100222823439150990299989680593179350933020427732386716386685052221680274283469481350106415150660410528574034324184318354089504379956162660478769613136499331243363223860893663583161020156316072996007464894397755058410931262938
e_priv = 65537

# Compute e_pub * d_pub - 1
ed = e_pub * d_pub
ed_minus_1 = ed - 1

# Iterate possible k values
found = False
for k in range(1, 2**20):
    if ed_minus_1 % k != 0:
        continue
    phi_candidate = ed_minus_1 // k
    # Check if phi_candidate is even
    if phi_candidate % 2 != 0:
        continue
    sum_pq = N + 1 - phi_candidate
    # Compute discriminant
    D = sum_pq ** 2 - 4 * N
    if D < 0:
        continue
    sqrt_D = math.isqrt(D)
    if sqrt_D * sqrt_D != D:
        continue
    # Check if p and q are integers and factors of N
    p = (sum_pq + sqrt_D) // 2
    q = (sum_pq - sqrt_D) // 2
    if p * q == N:
        print(f"Found k = {k}")
        print(f"p = {p}")
        print(f"q = {q}")
        # Compute phi(N)
        phi = (p - 1) * (q - 1)
        # Compute private key for e_priv
        d_priv = pow(e_priv, -1, phi)
        # Decrypt the ciphertext
        m = pow(c, d_priv, N)
        print(f"Decrypted message: {long_to_bytes(m).decode()}")
        found = True
        break
if not found:
    print("No valid k found in the range.")
    


# Found k = 7983
# p = 12673583859073640501661455004784587727654478446168828670161124936354757284691620326810620730841144377346099498240982811485371900565080834027555162227575467
# q = 9396132067856904799705987823868170683112984056272046970591959922947051853868582057072505997173925740215078957901709486016878996439574126935354008510180947
# DawgCTF{kn0w1ng_d_1s_kn0w1ng_f4ct0rs}