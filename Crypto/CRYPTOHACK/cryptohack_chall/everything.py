
from __future__ import print_function
import libnum
 
def continued_fractions_expansion(numerator,denominator):#(e,N)
    result=[]
 
    divident = numerator % denominator
    quotient = numerator //denominator
    result.append(quotient)
 
    while divident != 0:
        numerator = numerator - quotient * denominator
 
        tmp = denominator
        denominator = numerator
        numerator = tmp
 
        divident = numerator % denominator
        quotient = numerator //denominator
        result.append(quotient)
 
    return result
 
def convergents(expansion):
    convergents=[(expansion[0], 1)]
    for i in range(1, len(expansion)):
        numerator = 1
        denominator = expansion[i]
        for j in range(i - 1, -1, -1):
            numerator += expansion[j] * denominator
            if j==0:
                break
            tmp = denominator
            denominator = numerator
            numerator = tmp
        convergents.append((numerator, denominator)) #(k,d)
    return convergents
 
def newtonSqrt(n):
    approx = n // 2
    better = (approx + n //approx) // 2
    while better != approx:
        approx = better
        better = (approx + n // approx) // 2
    return approx
 
def wiener_attack(cons, e, N):
    for cs in cons:
        k,d = cs
        if k == 0:
            continue
        phi_N = (e * d - 1) // k
        #x**2 - ((N - phi_N) + 1) * x + N = 0
        a = 1
        b = -((N - phi_N) + 1)
        c = N
        delta = b * b - 4 * a * c
        if delta <= 0:
            continue
        x1 = (newtonSqrt(delta) - b)//(2 * a)
        x2 = -(newtonSqrt(delta) + b)//(2 * a)
        if x1 * x2 == N:
            return [x1, x2, k, d]
 
if __name__ == "__main__":
   n=17882358060039339138898609438175411871477799918608830364502878294884428124352650304487222941488283375369504964489843886450079011111185462712713723967554860800590884830066000037099382469037854558513800884226033482024813889617119261578740186832726330482660558112299636890899520011220715934812750994601701551700102743698011384901217438912042452845551043076325218096704501728676598844462217580321136090473356372587847867144139594128211568185994035330415437804541731112709398826340193004240100025524738143760028319395043726883002837253849402330482885844810147036036336331435599614615503162626162367298458471506712461489989
e=17020150076709128119083974734794181027444082538984561213457316385002227057046434624926585749829752528593484562619943378254221611402273789707344641621909587301235354100329524707868740634136536090426674571043575143643509588206167467975358621913734029724621239906525138080313643641583879006750707195361675041612917976706071422871623836736573031684273386527347331538106636557760592110474555054035119652704752522351493705235389689571190594575425975884359690828537582335216844791552006182660195930518013924320699666032058521436148104535591298587644016501482651965898477498665383282100884936846002622549396978211338460810061
c=13404525979748126097473495174813420602872447183137163515874424800745908465888610753614424273646556867230585716334041302414788296235957551537280962982606872739790238283352083341665600695265159866398615606445940999707112115592530367490262243190990792817478038440051246574063866414124249543246249381067426279737022156185945505900370286034722108244980586354993277510391977307681865198470046687594466202504536527770949973532056924243655648076079280163940372194706002378540202338409029918853268685707742216040130263591527267967132601287257674155827540831619548675943049297472561270988595335043005828140324687252672722445815
expansion = continued_fractions_expansion(e, n)
cons = convergents(expansion)
p, q, k, d = wiener_attack(cons, e, n)
m = pow(c, d, n)
print(libnum.n2s(m))
#crypto{s0m3th1ng5_c4n_b3_t00_b1g}
